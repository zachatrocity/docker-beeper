name: Build and Publish Docker Image

on:
  push:
    branches:
      - main
    tags:
      - 'v*'
  pull_request:
    branches:
      - main

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to the Container registry
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}
            type=sha,format=long
            type=raw,value=latest,enable=${{ github.ref == format('refs/heads/{0}', 'main') }}

      - name: Build and push amd64 Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          platforms: linux/amd64
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      # ARM64 build is commented out until Beeper supports ARM64 AppImage
      # - name: Build and push arm64 Docker image
      #   uses: docker/build-push-action@v5
      #   with:
      #     context: .
      #     file: ./Dockerfile.aarch64
      #     platforms: linux/arm64
      #     push: ${{ github.event_name != 'pull_request' }}
      #     tags: ${{ steps.meta.outputs.tags }}-arm64
      #     labels: ${{ steps.meta.outputs.labels }}
      #     cache-from: type=gha
      #     cache-to: type=gha,mode=max

      # Manifest creation is simplified until ARM64 support is added
      - name: Create and push manifest
        if: github.event_name != 'pull_request'
        run: |
          # Extract the image name without the registry
          IMAGE_WITHOUT_REGISTRY=$(echo "${{ env.IMAGE_NAME }}" | tr '[:upper:]' '[:lower:]')
          
          # For each tag, create a manifest with just the amd64 image
          for tag in $(echo "${{ steps.meta.outputs.tags }}" | tr '\n' ' '); do
            # Extract just the tag part (after the last colon)
            TAG_ONLY=$(echo "$tag" | rev | cut -d':' -f1 | rev)
            
            # Create the manifest with only amd64
            docker manifest create \
              ${{ env.REGISTRY }}/$IMAGE_WITHOUT_REGISTRY:$TAG_ONLY \
              ${{ env.REGISTRY }}/$IMAGE_WITHOUT_REGISTRY:$TAG_ONLY
            
            # Push the manifest
            docker manifest push ${{ env.REGISTRY }}/$IMAGE_WITHOUT_REGISTRY:$TAG_ONLY
          done
